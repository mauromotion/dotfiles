#+TITLE: Mauro's GNU Emacs Config
#+AUTHOR: Mauro Di Ianni (mmotion)
#+EMAIL: hello@mauromotion.com
#+DESCRIPTION: Mauro's personal Emacs configuration
#+STARTUP: content
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle config.el

* Table of Contents :toc:
- [[#general-flow][General flow]]
- [[#package-manager][Package Manager]]
  - [[#auto-update-packages][Auto-Update Packages]]
- [[#keep-directories-clean][Keep directories clean]]
- [[#essentials][Essentials]]
  - [[#ui-elements-commands-history-trash-dir-tabs][UI elements, commands history, trash dir, tabs.]]
  - [[#bookmarks][Bookmarks]]
  - [[#navigation][Navigation]]
- [[#appearance][Appearance]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
  - [[#nerd-icons][Nerd-icons]]
  - [[#modeline][Modeline]]
  - [[#emacs-dashboard][Emacs-dashboard]]
  - [[#indent-line-guides][Indent Line Guides]]
  - [[#colorful-mode][Colorful mode]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#helpful][Helpful]]
- [[#evil-mode][Evil-mode]]
  - [[#main-setup][Main setup]]
  - [[#evil-collection][Evil-collection]]
  - [[#evil-goggles][Evil-goggles]]
  - [[#evil-nerd-commenter][Evil-nerd-commenter]]
  - [[#undo-fu][Undo-Fu]]
- [[#keybindings][Keybindings]]
  - [[#general-keybindings][General keybindings]]
  - [[#which-key][Which-key]]
  - [[#custom-functions][Custom functions]]
  - [[#hydras][Hydras]]
  - [[#define-sub-menus][Define Sub-menus]]
  - [[#configure-which-key-descriptions][Configure which-key descriptions]]
  - [[#evil-mode-integration][Evil-mode integration]]
- [[#completion--selection-framework][Completion & Selection Framework]]
  - [[#consult][Consult]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
- [[#spellchecking][Spellchecking]]
- [[#email][Email]]
  - [[#mu4e][mu4e]]
- [[#org-mode][Org-mode]]
  - [[#org-mode-base-settings][Org-mode base settings]]
  - [[#org-mode-custom-functions][Org-mode custom functions]]
  - [[#org-mode-config][Org-mode config]]
  - [[#org-mode-todo-keywords][Org-mode Todo Keywords]]
  - [[#org-mode-capture-templates][Org-mode Capture Templates]]
  - [[#evil-org][Evil-org]]
  - [[#toc-org][TOC-org]]
  - [[#org-babel][Org-Babel]]
  - [[#org-download][Org-download]]
  - [[#structure-templates][Structure Templates]]
  - [[#highlight-todo][Highlight-todo]]
- [[#org-mode-styling][Org-mode Styling]]
  - [[#org-superstar-bullet-points][Org-superstar (bullet points)]]
  - [[#fancy-priorities-look][Fancy Priorities Look]]
  - [[#org-modern-not-in-use][Org-modern (not in use)]]
  - [[#olivetti][Olivetti]]
  - [[#toggle-todos-and-checkboxes-with-ret][Toggle TODOs and checkboxes with RET]]
- [[#denote][Denote]]
  - [[#denote-main-config][Denote main config]]
  - [[#denote-org][Denote-org]]
  - [[#consult-notes][Consult-notes]]
  - [[#denote-journal][Denote-journal]]
  - [[#denote-explore][Denote-explore]]
- [[#dired][Dired]]
  - [[#main-dired-config][Main dired config]]
  - [[#nerd-icons-for-dired][Nerd-icons for Dired]]
  - [[#hide-dotfiles][Hide dotfiles]]
  - [[#set-up-programs-to-open-certain-files-from-dired][Set up programs to open certain files from dired]]
  - [[#dired-preview-not-in-use][Dired preview (not in use)]]
- [[#programming][Programming]]
  - [[#project][Project]]
  - [[#magit][Magit]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#web-development][Web development]]
  - [[#lsp-mode][LSP mode]]
  - [[#formatting][Formatting]]
- [[#terminal-emulators][Terminal Emulators]]
  - [[#term][Term]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#reset-gc-threshold][Reset GC Threshold]]

* General flow
This literal configuration will work like this:
- In =early-init.el= some basic initial UI settings are configured.
- Then in =init.el= in order, there's the start up performance function, the whole use-package installation and setup, and a check that loads =config.el= if present on disk, or, if not present, it will tangle this =config.org= file so that =config.el= gets generated. And then =init.el= loads the whole configuration from =config.el=.
- =init.el= will also auto-reload the config each time =config.org= is saved.
* Package Manager
** Auto-Update Packages
#+begin_src emacs-lisp
;;;; Auto-update packages
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "10:00"))
#+end_src
* Keep directories clean
All the temp and backup files that Emacs generates are put into "~/.cache/emacs" instead that along side the original files in the same directory.
#+begin_src emacs-lisp
;;;; Keep directories clean ------------------------------------------
(use-package no-littering
  :demand t
  :init
  (setq user-emacs-directory "~/.cache/emacs"))

;; Define backup and auto-save paths with mmotion/ prefix
(defvar mmotion/backup-dir (no-littering-expand-var-file-name "backup/"))
(defvar mmotion/auto-save-dir (no-littering-expand-var-file-name "auto-save/"))

;; Ensure the directories exist
(dolist (dir (list mmotion/backup-dir mmotion/auto-save-dir))
  (unless (file-exists-p dir)
    (make-directory dir t)))

;; Redirect auto-save and backup files to clean directories
(setq auto-save-file-name-transforms `((".*" ,mmotion/auto-save-dir t)))
(setq backup-directory-alist `(("." . ,mmotion/backup-dir)))

;; Optional: prevent lockfiles like .#file.txt
(setq create-lockfiles nil)
#+end_src
* Essentials
** UI elements, commands history, trash dir, tabs.
Basic set up of Emacs' UI, removing the default toolbars, and setting up some system preferences.
  #+begin_src emacs-lisp
    ;;; Essentials ------------------------------------------
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
    (menu-bar-mode -1)
    (setq visible-bell t)
    (setopt use-short-answers t)
    (global-auto-revert-mode t)
    (delete-selection-mode 1) ; Delete selected text and replace it with typed text

    ;;;; Smooth scrolling
    (pixel-scroll-precision-mode 1)

    ;;;; Autopairing
    (electric-pair-mode 1)
    ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
    ;; Otherwise, org-tempo is broken when you try to "<s" TAB...
    (add-hook 'org-mode-hook
      (lambda ()
        (setq-local electric-pair-inhibit-predicate
                    (lambda (c)
                      (or (char-equal c ?<)
                          (electric-pair-default-inhibit c))))))

    ;;;; Persist history over Emacs restarts. Vertico sorts by history position.
    (savehist-mode 1)

    ;;;; Turn on recentf-mode right after init, and keep its list alive
    (recentf-mode 1)
    (setq recentf-max-saved-items 200
          recentf-auto-cleanup 'never)  ;; don’t remove dead entries
    (add-hook 'kill-emacs-hook #'recentf-save-list)

    ;;;; Use system trash when deleting files
    (setq delete-by-moving-to-trash t)

    ;;;; Tabs to spaces
    (setq-default indent-tabs-mode nil
    	            tab-width 2) 

    ;;;; Column numbers
    (column-number-mode 1)
    (setq display-line-numbers-type 'relative)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (add-hook 'astro-ts-mode-hook #'display-line-numbers-mode)

    ;;;; Prettify symbols
    (global-prettify-symbols-mode t)
  #+end_src
** Bookmarks
Make sure that bookmarks are saved automatically and don't get erased.
#+begin_src emacs-lisp
;;;; Bookmarks
(use-package bookmark
  :ensure nil
  :config
  ;; Store bookmarks in a clean location
  (setq bookmark-default-file (no-littering-expand-var-file-name "bookmarks"))
  ;; Save bookmarks automatically
  (setq bookmark-save-flag 1))
#+end_src
** Navigation
Use ace-window to manipulate windows and navigate between them more efficiently, and Avy to jump to any word or line on the page with a char-based decision tree.
#+begin_src emacs-lisp
;;;; Navigation
;;;;; Ace-window
(use-package ace-window)
(global-set-key (kbd "M-o") 'ace-window)

;;;;; Avy
(use-package avy)
#+end_src
* Appearance
** Fonts
For the moment I've settled on [[https://www.ibm.com/plex/][IBM Plex Mono ]]for my monospace font and [[https://weiweihuanghuang.github.io/Work-Sans/][Work Sans]] for my proportional spaced font.

The Arch Linux packages are called respectively =ttf-ibm-plex= and =ttf-work-sans-variable=.

For the monospace font I don't need the Nerd Font patched version on Emacs, since all the Nerd icons are installed by themselves with the =nerd-icons= package (see [[Icons]]).

I'm also setting comments to be /italic/.

  #+begin_src emacs-lisp
;;; Fonts ------------------------------------------------

;; Define font names and sizes
(defvar mmotion/default-font "IBM Plex Mono")
(defvar mmotion/variable-font "Work Sans")
(defvar mmotion/base-font-size 120)
(defvar mmotion/variable-font-size 130)

;; Line spacing
;; (setq-local line-spacing 0.2)
(setq-default line-spacing 0.2)

;;;; Set font faces
(set-face-attribute 'default nil
                    :font mmotion/default-font
                    :height mmotion/base-font-size)
;; Make comments and docstrings italic
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-comment-delimiter-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-doc-face nil
                    :slant 'italic)
;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    :font mmotion/variable-font
                    :height mmotion/variable-font-size
                    :weight 'normal)
  #+end_src
** Themes
I love Prot's [[https://protesilaos.com/emacs/ef-themes-pictures][ef-themes]] and [[https://protesilaos.com/codelog/2025-05-27-emacs-doric-themes-0-1-0/][doric-themes]]!  Also keeping[[https://github.com/doomemacs/themes?tab=readme-ov-file#theme-list][ doom-themes]] here, just because.
*** Ef-themes
#+begin_src emacs-lisp
;;; Themes ------------------------------------------------
;;;; ef-themes
(use-package ef-themes
  :defer t
  :config
  (setq ef-themes-to-toggle '(ef-kassio ef-owl))
  ;; (setq ef-themes-headings ; read the manual's entry or the doc string
  ;;     '((0 variable-pitch light 2)
  ;;       (1 variable-pitch light 1.8)
  ;;       (2 variable-pitch regular 1.7)
  ;;       (3 variable-pitch regular 1.6)
  ;;       (4 variable-pitch regular 1.5)
  ;;       (5 variable-pitch 1.4) ; absence of weight means `bold'
  ;;       (6 variable-pitch 1.3)
  ;;       (7 variable-pitch 1.2)
  ;;       (t variable-pitch 1.1)))
;; They are nil by default...
  (setq ef-themes-mixed-fonts t
      ef-themes-variable-pitch-ui t)
;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes))
#+end_src
*** Doric-themes
#+begin_src emacs-lisp
;;;; doric-themes
(use-package doric-themes
  :defer t
  :config
  (setq doric-themes-to-toggle '(doric-earth doric-fire)))
#+end_src
*** Doom-themes
#+begin_src emacs-lisp
;;;; doom-themes
(use-package doom-themes
  :defer t
  :config
  (doom-themes-org-config)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t ))
;; (load-theme 'doom-city-lights t)
#+end_src
*** Circadian
Set dark or light theme based on the time of the day.
#+begin_src emacs-lisp
;;;; Set dark or light theme based on the time of the day
(setq calendar-latitude 51.406422)
(setq calendar-longitude 0.004860)

(use-package circadian
  :ensure t
  :config
  (setq circadian-themes '((:sunrise . ef-day)
                           (:sunset  . ef-owl)))
  (circadian-setup))
#+end_src
** Nerd-icons
I'd rather use =nerd-icons= than =all-the-icons=, much more reliable.
   #+begin_src emacs-lisp
;;;; Use nerd-icons
(use-package nerd-icons
  :demand t
  :config
  (when (display-graphic-p)
    ;; Configure fontset for all frames and contexts
    (set-fontset-font t 'unicode "Symbols Nerd Font Mono" nil 'append)
    (set-fontset-font "fontset-default" 'unicode "Symbols Nerd Font Mono" nil 'append)
    ;; Also set for current frame
    (set-fontset-font (frame-parameter nil 'font) 'unicode "Symbols Nerd Font Mono" nil 'append)))

(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
   #+end_src
** Modeline
*** Doom-modeline (not in use)
   #+begin_src emacs-lisp :tangle no
;;;; Modeline -----------------------------------
;;;;; Doom-modeline
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-height 25
        doom-modeline-bar-width 5
        doom-modeline-window-width-limit 85
        doom-modeline-persp-name t
        doom-modeline-persp-icon t
        doom-modeline-buffer-modification-icon t
        doom-modeline-icon t))
(with-eval-after-load 'doom-modeline
    (set-face-attribute 'mode-line nil :font "BlexMono Nerd Font-12")
    (set-face-attribute 'mode-line-inactive nil :font "BlexMono Nerd Font-12"))
   #+end_src
*** Mood-line
#+begin_src emacs-lisp :tangle yes
;;;;; Mood-line
(use-package mood-line

  ;; Enable mood-line
  :config
  (mood-line-mode)

  ;; Use pretty Fira Code-compatible glyphs
  :custom
  (setq mood-line-format mood-line-format-default-extended)
  (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src
** Emacs-dashboard
Settings *must* be in =:custom= otherwise they won't work.

   #+begin_src emacs-lisp
;;;; Emacs-dashboard
(use-package dashboard
  :defer nil
  :config
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-startup-banner 3)
  (dashboard-center-content t)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons)
  (dashboard-set-heading-icons t)
  ;; (dashboard-modify-heading-icons '((recents   . "nf-oct-file")
  ;;                                  (bookmarks . "nf-oct-bookmark")))
  (dashboard-set-file-icons t)
  (dashboard-items '((recents   . 5)
                    (bookmarks . 10)
                    (projects  . 5)
                    (agenda    . 10))))

  ;; Force refresh AFTER full startup completes
  (add-hook 'emacs-startup-hook
            (lambda ()
              (dashboard-refresh-buffer)
              (switch-to-buffer "*dashboard*")))
   #+end_src
** Indent Line Guides
Visual indicators of indentation for code.
#+begin_src emacs-lisp
;;;; Indent line guides
(use-package indent-bars
  :hook ((prog-mode) . indent-bars-mode)) ; or whichever modes you prefer
#+end_src
** Colorful mode
Preview colours in buffers in real time.
#+begin_src emacs-lisp
(use-package colorful-mode
  :diminish
  :custom
  (colorful-use-prefix nil)
  (colorful-only-strings 'only-prog)
  (css-fontify-colors nil)
  :config
  (global-colorful-mode t)
  (add-to-list 'global-colorful-modes 'helpful-mode))
#+end_src
** Rainbow delimiters
Colourful parentheses to help mostly with elisp.
#+begin_src emacs-lisp
;;;; Colorful parentheses to help mostly with elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Helpful
Better front end for Emacs' documentation
#+begin_src emacs-lisp
;;;; Better front end for documentation
(use-package helpful
  :commands (helpful-callable
             helpful-variable
             helpful-command
             helpful-key)
  :bind
  ( ;; remap the built-in help commands to Helpful
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-key]      . helpful-key)

    ;; remap apropos to Consult’s version
    ([remap apropos-command]   . consult-apropos)))
#+end_src
* Evil-mode
Vim-like modal editing.
** Main setup
  #+begin_src emacs-lisp
;;; Evil Mode ------------------------------------------------
;;;; Configure evil-mode
(use-package evil
  :demand t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-undo-system 'undo-fu)
  ;;:hook (evil-mode . rune/evil-hook)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)) 
  #+end_src
** Evil-collection
A collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as help-mode, M-x calendar, Eshell and more.
   #+begin_src emacs-lisp
;;;; Configure evil-collection
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
   #+end_src
** Evil-goggles
Configure evil-goggles to show a highlight over a selection or yank.
   #+begin_src emacs-lisp
;;;; Configure evil-goggles to show a highlight over a selection or yank
(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
   #+end_src
** Evil-nerd-commenter
   #+begin_src emacs-lisp
;;;; Commenting
(use-package evil-nerd-commenter
  :bind ("C-g" . evilnc-comment-or-uncomment-lines))
   #+end_src
** Undo-Fu
A modern alternative to undo-tree.
#+begin_src emacs-lisp
;;;; A modern alternative to undo-tree
(use-package undo-fu
  :config
  (global-unset-key (kbd "C-z"))
  (global-set-key   (kbd "C-z")   #'undo-fu-only-undo)
  (global-set-key   (kbd "C-S-z") #'undo-fu-only-redo))

;; Set up dir for undo history using no-littering
(defvar mmotion/undo-fu-session-dir
  (no-littering-expand-var-file-name "undo-fu-session/"))

(unless (file-exists-p mmotion/undo-fu-session-dir)
  (make-directory mmotion/undo-fu-session-dir t))

(use-package undo-fu-session
  :after undo-fu
  :init
  ;; must be set before the package loads
  (setq undo-fu-session-directory      mmotion/undo-fu-session-dir
        undo-fu-session-compression    'gz       ; or 'bz2, 'xz, 'zst, nil
        undo-fu-session-file-limit     100)
  :config
  ;; turn on global persistence only once everything’s in place
  (undo-fu-session-global-mode))
#+end_src
* Keybindings
** General keybindings
  #+begin_src emacs-lisp
;;; Keybindings ------------------------------------------
;;;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;;;; Use hippie-expand instead of dabbrev-expand
(use-package hippie-exp
  :bind*
  ("M-/" . hippie-expand))
#+end_src
** Which-key
Display keybindings.
   #+begin_src emacs-lisp
;;;; Which-key
(use-package which-key
  :defer 0
  ;; :init (which-key-mode)
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5
        which-key-separator "   "
        which-key-min-display-lines 10
        which-key-add-column-padding 1))
   #+end_src
** Custom functions
*** Toggle line-number-states function
   #+begin_src emacs-lisp
;;;; Toggle through line numbers styles
(defvar mmotion/line-number-states '(nil t relative visual)
  "States to cycle through for line numbers.")

(defvar-local mmotion/current-line-number-index 0
  "Current index in `mmmotion/line-number-states` for the current buffer.")

(defun mmotion/cycle-line-numbers ()
  "Cycle through different line number display modes, per buffer."
  (interactive)
  ;; Increment index and wrap around
  (setq mmotion/current-line-number-index
        (mod (1+ mmotion/current-line-number-index)
             (length mmotion/line-number-states)))

  ;; Set the display-line-numbers value
  (setq display-line-numbers
        (nth mmotion/current-line-number-index mmotion/line-number-states))

  ;; Force UI update
  (redraw-display)

  ;; Show a message
  (message "Line numbers: %s" display-line-numbers))
   #+end_src
** Hydras
Keybindings with functions to be able to do things repeatedly like changing the size of a window or text.
   #+begin_src emacs-lisp
;;;; Define hydras
(use-package hydra
  :defer 0
  :config

;;;;; Scale Text
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("e" text-scale-increase "in")
    ("i" text-scale-decrease "out")
    ("r" (lambda () (interactive) (text-scale-set 0)) "reset")
    ("f" nil "finished (or esc)" :exit t))

;;;;; Scale olivetti margins
  (defhydra hydra-olivetti-margins (:timeout 4)
    "scale olivetti margins"
    ("n" olivetti-expand "expand")
    ("o" olivetti-shrink "shrink"))

;;;;; Resize Windows
  (defhydra hydra-resize-windows (:timeout 4)
    "resize panels"
    ("n" (lambda () (interactive) (shrink-window-horizontally 5)) "left")
    ("o" (lambda () (interactive) (enlarge-window-horizontally 5)) "right")
    ("e" (lambda () (interactive) (enlarge-window 5)) "down")
    ("i" (lambda () (interactive) (shrink-window 5)) "up")
    ("b" balance-windows "reset")
    ("f" nil "finished (or esc)" :exit t)))
   #+end_src
** Define Sub-menus 
*** [B] Buffer keybindings
    #+begin_src emacs-lisp
;;;;; Define submenu keymaps
(defvar-keymap mmotion/buffer-map 
  :doc "Buffer operations submenu."
  "e" #'eval-buffer
  "i" #'ibuffer
  "k" #'kill-buffer
  "n" #'previous-buffer
  "o" #'next-buffer
  "r" #'revert-buffer)
    #+end_src
*** [F] Find keybindings
    #+begin_src emacs-lisp
(defvar-keymap mmotion/find-map
  :doc "Find operations submenu."
  "a" #'consult-org-agenda
  "f" #'find-file
  "g" #'consult-ripgrep
  "l" #'consult-line
  "o" #'consult-outline
  "r" #'consult-recent-file)
    #+end_src
*** [G] Go to keybindings (avy)
#+begin_src emacs-lisp
(defvar-keymap mmotion/goto-map
  :doc "Go to operations submenu."
  "c" #'avy-goto-char-2
  "w" #'avy-goto-word-1
  "l" #'avy-goto-line)
#+end_src
*** [H] Help keybindings
    #+begin_src emacs-lisp
(defvar-keymap mmotion/help-map
  :doc "Help operations submenu."
  "c" #'describe-command
  "f" #'describe-function
  "k" #'describe-key
  "m" #'describe-mode
  "p" #'describe-package
  "v" #'describe-variable)
    #+end_src
*** [L] LSP keybindings
#+begin_src emacs-lisp
(defvar-keymap mmotion/lsp-map
  :doc "LSP operations submenu."
  ;; Core LSP Functions
  "r" #'lsp-rename
  "f" #'lsp-format-buffer
  "F" #'lsp-format-region
  "a" #'lsp-execute-code-action
  "o" #'lsp-organize-imports
  ;; Navigation
  "d" #'lsp-find-definition
  "D" #'lsp-find-declaration
  "i" #'lsp-find-implementation
  "t" #'lsp-find-type-definition
  "R" #'lsp-find-references
  "s" #'consult-lsp-symbols
  ;; Information & Help
  "h" #'lsp-describe-thing-at-point
  "H" #'lsp-signature-help
  "k" #'lsp-describe-session
  ;; Workspace Management
  "w a" #'lsp-workspace-folders-add
  "w r" #'lsp-workspace-folders-remove
  "w l" #'lsp-workspace-folders-open
  ;; Server Control
  "S r" #'lsp-workspace-restart
  "S s" #'lsp-workspace-shutdown
  "S S" #'lsp
  ;; Diagnostics (Errors/Warnings)
  "e l" #'lsp-treemacs-errors-list
  "e n" #'flycheck-next-error
  "e p" #'flycheck-previous-error
  "e e" #'flycheck-explain-error-at-point
  ;; LSP UI specific
  "u d" #'lsp-ui-peek-find-definitions
  "u r" #'lsp-ui-peek-find-references
  "u i" #'lsp-ui-imenu
  "u s" #'lsp-ui-sideline-mode)
#+end_src
*** [M] Magit keybindings
#+begin_src emacs-lisp
(defvar-keymap mmotion/magit-map
  :doc "Git operations submenu."
  "s" #'magit-status)
#+end_src
*** [N] Notes keybindings (denote)
    #+begin_src emacs-lisp
(defvar-keymap mmotion/notes-map
  :doc "Notes operations submenu."
  "b" #'denote-backlinks
  "d" #'denote-dired
  "e" #'denote-org-extract-org-subtree
  "f" #'consult-notes
  "g" #'consult-notes-search-in-all-notes
  "j" #'mmotion/open-today-journal
  "l" #'denote-link
  "n" #'denote
  "r" #'denote-rename-file
  "s" #'denote-signature
  "t" #'denote-rename-file-keywords)
    #+end_src
*** [O] Org-mode keybindings
    #+begin_src emacs-lisp
(defvar-keymap mmotion/org-map
  :doc "Org-mode operations."
  "a" #'org-agenda
  "c" #'org-capture
  "d" #'org-deadline
  "i" #'mmotion/org-insert-image-from-url
  "l" #'org-insert-link
  "L" #'org-store-link
  "r" #'org-refile
  "p" #'org-refile-copy
  "s" #'org-schedule
  "u" #'org-update-all-dblocks)
    #+end_src
*** [P] Project keybindings
#+begin_src emacs-lisp
(defvar-keymap mmotion/project-map
  :doc "Project operations."
  "b" #'consult-project-buffer
  "d" #'project-dired
  "f" #'project-find-file
  "g" #'project-find-regexp
  "k" #'project-kill-buffers
  "p" #'project-switch-project
  "s" #'project-shell)
#+end_src
*** [T] Toggle and Tabs keybindings
    #+begin_src emacs-lisp
(defvar-keymap mmotion/toggle-map
  :doc "Toggle settings."
  "c" #'tab-close
  "l" #'mmotion/cycle-line-numbers
  "n" #'tab-new
  "o" #'hydra-olivetti-margins/body
  ;; "p" #'dired-preview-mode
  "t" #'consult-theme
  "r" #'tab-rename
  "s" #'hydra-text-scale/body
  "v" #'vterm-toggle-cd)
    #+end_src
*** [W] Windows keybindings
    #+begin_src emacs-lisp
(defvar-keymap mmotion/window-map
  :doc "Window operations."
  "b" #'balance-windows
  "d" #'delete-window
  "m" #'maximize-window
  "r" #'hydra-resize-windows/body
  "i" #'ace-swap-window
  "s" #'split-window-vertically
  "v" #'split-window-horizontally
  "w" #'ace-window)
    #+end_src
*** <space> Leader key keybindings
    #+begin_src emacs-lisp
;;;; Define leader keymap
(defvar-keymap mmotion/leader-map
  :doc "My global leader keymap."
  ;; Direct keybindings
  ":" #'execute-extended-command
  "-" #'dired-jump
  "SPC" #'consult-buffer
  "," #'consult-recent-file
  "." #'find-file
  "c" #'calendar
  "d" #'dictionary)

;;;; Add submenus to the leader keymap
(keymap-set mmotion/leader-map "b" mmotion/buffer-map)
(keymap-set mmotion/leader-map "f" mmotion/find-map)
(keymap-set mmotion/leader-map "g" mmotion/goto-map)
(keymap-set mmotion/leader-map "h" mmotion/help-map)
(keymap-set mmotion/leader-map "l" mmotion/lsp-map)
(keymap-set mmotion/leader-map "m" mmotion/magit-map)
(keymap-set mmotion/leader-map "n" mmotion/notes-map)
(keymap-set mmotion/leader-map "o" mmotion/org-map)
(keymap-set mmotion/leader-map "p" mmotion/project-map)
(keymap-set mmotion/leader-map "t" mmotion/toggle-map)
(keymap-set mmotion/leader-map "w" mmotion/window-map)
    #+end_src
** Configure which-key descriptions
   #+begin_src emacs-lisp
;;;; Configure which-key descriptions
(with-eval-after-load 'which-key
  (which-key-add-keymap-based-replacements mmotion/leader-map
    ":" "M-x"
    "-" "Dired Jump"
    "SPC" "Switch Buffer"
    "b" "Buffer..."
    "c" "Calendar"
    "d" "Dictionary"
    "f" "Find..."
    "g" "Go to..."
    "h" "Help..."
    "l" "LSP..."
    "l S" "LSP Server..."
    "l e" "Diagnosticts..."
    "l w" "Workspace..."
    "l u" "LSP UI..."
    "m" "Magit..."
    "n" "Notes..."
    "o" "Org..."
    "p" "Project..."
    "t" "Toggle / Tabs..."
    "w" "Window..."
    "," "Recent Files"
    "." "Find Files")
  
  (which-key-add-keymap-based-replacements mmotion/buffer-map
    "i" "iBuffer list"
    "k" "Kill Buffer"
    "n" "Previous Buffer" 
    "o" "Next Buffer"
    "e" "Eval Buffer")

  (which-key-add-keymap-based-replacements mmotion/find-map
    "a" "Org-agenda headings"
    "f" "Find files"
    "g" "Ripgrep"
    "l" "Line"
    "o" "Outline headings"
    "r" "Recent files")

  (which-key-add-keymap-based-replacements mmotion/goto-map
    "c" "Go to character"
    "w" "Go to word"
    "l" "Go to line")

  (which-key-add-keymap-based-replacements mmotion/help-map
    "c" "Describe command"
    "f" "Describe function"
    "m" "Describe mode"
    "k" "Describe key"
    "p" "Describe package"
    "v" "Describe variable")

 (which-key-add-keymap-based-replacements mmotion/lsp-map
    "r" "Rename symbol"
    "f" "Format buffer"
    "F" "Format region"
    "a" "Code actions"
    "o" "Organize imports"
    "d" "Go to definition"
    "D" "Go to declaration"
    "i" "Go to implementation"
    "t" "Go to type definiton"
    "R" "Find references"
    "s" "Workspace symbols (consult)"
    "h" "Show documentation"
    "H" "Show signature help"
    "k" "LSP session info"
    "w a" "Add workspace folder"
    "w r" "Remove workspace folder"
    "w l" "List workspace folders"
    "S r" "Restart LSP server"
    "S s" "Shutdown LSP server"
    "S S" "Start LSP"
    "e l" "List all errors"
    "e n" "Next error"
    "e p" "Previous error"
    "e e" "Explain error"
    "u d" "Peek definition"
    "u r" "Peek references"
    "u i" "Imenu with LSP"
    "u s" "Toggle sideline")

  (which-key-add-keymap-based-replacements mmotion/magit-map
    "s" "(ma)Git status")
  
  (which-key-add-keymap-based-replacements mmotion/notes-map
    "b" "Show note's backlinks"
    "d" "Filter notes in Dired"
    "e" "Create a new note from current subtree"
    "f" "Find a note"
    "g" "Grep inside all notes"
    "j" "Open today's journal"
    "l" "Insert link to note"
    "n" "Create a new note"
    "r" "Rename a note"
    "s" "Creat a new note with signature"
    "t" "Change note's keywords")
  
  (which-key-add-keymap-based-replacements mmotion/org-map
    "a" "Org Agenda"
    "c" "Org Capture"
    "d" "Add a Deadline"
    "i" "Insert image from URL"
    "l" "Org Store Link"
    "r" "Org Refile"
    "p" "Org Refile Copy"
    "s" "Add a Schedule"
    "u" "Update a dblock")

 (which-key-add-keymap-based-replacements mmotion/project-map
    "b" "Project's buffers"
    "d" "Project dired"
    "f" "Project find file"
    "g" "Project find with regexp"
    "k" "Project kill buffers"
    "p" "Switch project"
    "s" "Project shell"
  )
  
  (which-key-add-keymap-based-replacements mmotion/toggle-map
    "c" "Close current tab"
    "l" "Toggle line numbers"
    "n" "Create a new tab"
    "o" "Resize Olivetti margins"
    ;; "p" "Dired Preview"
    "r" "Rename current tab"
    "s" "Scale Text"
    "t" "Choose Theme"
    "v" "Vterm toggle")

  (which-key-add-keymap-based-replacements mmotion/window-map
    "b" "Reset windows"
    "d" "Delete window"
    "m" "Maximize window"
    "r" "Resize windows"
    "i" "Swap windows"
    "s" "Split window horizontally"
    "v" "Split window vertically"
    "w" "Switch window"))
   #+end_src
** Evil-mode integration
   #+begin_src emacs-lisp
;;;; Set up Evil integration
(when (featurep 'evil)
  ;; Clear existing bindings first
  (define-key evil-normal-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-visual-state-map (kbd "SPC") nil)
  
  ;; Set our leader map
  (define-key evil-normal-state-map (kbd "SPC") mmotion/leader-map)
  (define-key evil-motion-state-map (kbd "SPC") mmotion/leader-map)
  (define-key evil-visual-state-map (kbd "SPC") mmotion/leader-map))

;;;;; Make sure Evil properly integrates with our keybindings after it loads
(with-eval-after-load 'evil
  (add-hook 'evil-mode-hook
            (lambda ()
              (define-key evil-normal-state-map (kbd "SPC") mmotion/leader-map)
              (define-key evil-motion-state-map (kbd "SPC") mmotion/leader-map)
              (define-key evil-visual-state-map (kbd "SPC") mmotion/leader-map))))

;;;; Global fallback binding for all modes
(global-set-key (kbd "C-SPC") mmotion/leader-map)
   #+end_src
* Completion & Selection Framework
** Consult
Search and navigation commands.
  #+begin_src emacs-lisp
;;; Completion --------------------------------------------------
;;;; Consult
(use-package consult
  :defer t
  :after project
  :bind (("C-s" . consult-line)
         :map minibuffer-local-map
         ("C-r" . consult-history))
:config
  ;; Tell consult to use project.el for project detection
  (setq consult-project-function 
        (lambda (_may-prompt)
          (when-let ((project (project-current)))
            (project-root project)))))

(defun mmotion/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a character backward"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (delete-backward-char arg)))
  #+end_src

** Vertico
Vertical completion UI.
  #+begin_src emacs-lisp
;;;; Vertico
(use-package vertico
  :demand t
  :bind (:map minibuffer-local-map
              ("<backspace>" . mmotion/minibuffer-backward-kill))
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  ;; (vertico-count 20) ;; Show more candidates
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode 1))

;;;; Emacs minibuffer configurations.
(use-package emacs
  :ensure nil
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))
  #+end_src
** Orderless
Orderless completion style to match candidates in any order.
  #+begin_src emacs-lisp
;;;; Optionally use the `orderless' completion style.
(use-package orderless
  :after vertico
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
  #+end_src
** Marginalia
Rich annotation into completion results.
  #+begin_src emacs-lisp
;;;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :after vertico
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
  #+end_src
** Embark
Run commands onto completion candidates.
  #+begin_src emacs-lisp
;;;; Embark
(use-package embark
  :bind
  (("C-," . embark-act)
   ("M-," . embark-dwim)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
  #+end_src
** Corfu
COmpletion in Region FUnction (pop up for autocompletion).
  #+begin_src emacs-lisp
    ;;;; Corfu
    (use-package corfu
      :demand t
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)               ; enable auto popup
      (corfu-auto-delay 0.2)       ; wait 0.2s before popping up
      (corfu-auto-prefix 2)        ; only pop up after 2 chars
      (corfu-max-width 80)         ; cap popup width
      (corfu-max-length 20)        ; show at most 20 candidates
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

      ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))
      :init
      ;; Recommended: Enable Corfu globally. Recommended since many modes provide
      ;; Capfs and Dabbrev can be used globally (M-/). See also the customization
      ;; variable `global-corfu-modes' to exclude certain modes.
      (global-corfu-mode 1)

      ;; Enable optional extension modes:
      ;; (corfu-history-mode)
      ;; (corfu-popupinfo-mode)
      )

    ;; A few more useful configurations...
    (use-package emacs
      :ensure nil
      :custom
      ;; TAB cycle if there are only few candidates
      (completion-cycle-threshold 3)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)

      ;; Emacs 30 and newer: Disable Ispell completion function.
      ;; Try `cape-dict' as an alternative.
      (text-mode-ispell-word-completion nil)

      ;; Hide commands in M-x which do not apply to the current mode. Corfu
      ;; commands are hidden, since they are not used via M-x. This setting is
      ;; useful beyond Corfu.
      (read-extended-command-predicate #'command-completion-default-include-p))
  #+end_src
** Cape
Completion at point.
#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :config  ;; Use :config instead of :init to ensure cape is loaded
  ;; Setup completion functions with proper LSP integration
  (defun mmotion/setup-lsp-completion ()
    "Setup completion functions for LSP modes with Cape extensions."
    (setq-local completion-at-point-functions
                (list #'lsp-completion-at-point  ;; LSP first for best results
                      #'cape-dabbrev             ;; Dynamic abbreviations
                      #'cape-file                ;; File name completion
                      #'cape-symbol              ;; Symbol completion
                      #'cape-keyword)))          ;; Language keyword completion
  
  (defun mmotion/setup-general-completion ()
    "Setup completion functions for non-LSP modes."
    (setq-local completion-at-point-functions
                (list #'cape-dabbrev
                      #'cape-file
                      #'cape-symbol
                      #'cape-keyword)))
  
  ;; Add hooks
  (add-hook 'lsp-completion-mode-hook #'mmotion/setup-lsp-completion)
  (add-hook 'prog-mode-hook #'mmotion/setup-general-completion))
  
  ;; Optional: Add some useful Cape bindings
  ;; :bind (("C-c p d" . cape-dabbrev)
  ;;        ("C-c p f" . cape-file)
  ;;        ("C-c p s" . cape-symbol)
  ;;        ("C-c p k" . cape-keyword)))
#+end_src
* Spellchecking
*** ispell
  #+begin_src emacs-lisp :tangle yes
;;; Spellchecking ----------------------------------------
;; Use hunspell as the spell checker backend
(setq ispell-program-name "hunspell")

;; Set default dictionary (e.g. British English)
(setq ispell-dictionary "en_GB")

;; Tell Emacs where the dictionaries are (optional if system-wide)
;; (setenv "DICTIONARY" "en_GB") ; optional

;; Enable Flyspell globally in text modes
(add-hook 'text-mode-hook #'flyspell-mode)

;; For programming modes, only spell-check comments/strings
(add-hook 'prog-mode-hook #'flyspell-prog-mode)

;; Optional: nice popup correction UI
(use-package flyspell-correct
  :demand t
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-correct-wrapper))
  :config
  (evil-define-key 'normal 'global
    "z=" #'flyspell-correct-at-point))

;; Optional: function to switch dictionaries
(defun mmotion/set-dictionary (lang)
  "Switch Hunspell dictionary interactively."
  (interactive
   (list (completing-read "Dictionary: " '("en_US" "en_GB" "it_IT"))))
  (setq ispell-dictionary lang)
  (message "Switched dictionary to %s" lang))
  #+end_src
*** jinx (not in use)
#+begin_src emacs-lisp :tangle no
(use-package jinx
  :hook
  (emacs-startup . global-jinx-mode)
  :bind
  ("C-c s s" . jinx-correct)
  ("C-c s l" . jinx-languages)
  :config
  (setq jinx-languages "en_US en_GB it_IT"))
#+end_src
*** Dictionary
#+begin_src emacs-lisp
;;;; Use built-in dictionary-el
(use-package dictionary
  :ensure nil
  :defer t
  :bind
  ("C-c s d" . dictionary-search)
  :config
  (setq dictionary-server "dict.org"
        dictionary-use-single-buffer t))
#+end_src
* Email
** mu4e
#+begin_src emacs-lisp :tangle yes
(use-package mu4e
  :ensure nil
  :ensure-system-package mu
  :custom
  (user-mail-address "mauro@disroot.org")
  (user-full-name "Mauro")
  (mu4e-attachment-dir "~/Maildir/attachments/disroot")
  (mu4e-compose-signature-auto-include nil)
  (mu4e-drafts-folder "/Drafts")
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-maildir "~/Maildir/disroot")
  (mu4e-refile-folder "/Archive")
  (mu4e-sent-folder "/Sent")
  (mu4e-maildir-shortcuts
   '(("/Inbox" . ?i)
     ("/Trash" . ?t)
     ("/Drafts" . ?d)
     ("/Sent" . ?s)))
  (mu4e-trash-folder "/Trash")
  (mu4e-update-interval 300)
  (mu4e-use-fancy-chars t)
  (mu4e-view-show-addresses t)
  (mu4e-view-show-images t)
  (mu4e-view-use-gnus t)
  (mu4e-sent-messages-behavior 'sent)
  :config
  ;; HTML renderer
  (setq mm-text-html-renderer 'gnus-w3m)

  ;; SMTP configuration for Disroot
  (setq smtpmail-smtp-server "disroot.org"
        smtpmail-smtp-service 587
        smtpmail-stream-type 'starttls
        smtpmail-auth-credentials "~/.authinfo.gpg"
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        gnus-select-method '(nnimap "disroot.org"))

  ;; Enable debugging
  (setq smtpmail-debug-info t
        smtpmail-debug-verb t)

  ;; Add browser action
  (add-to-list 'mu4e-view-actions '("view in browser" . mu4e-action-view-in-browser)))
#+end_src
* Org-mode
** Org-mode base settings
  #+begin_src emacs-lisp
;;; Org-mode -----------------------------------------
;;;; Org-mode base settings
(defun mmotion/org-mode-setup ()
  (org-indent-mode 1)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (org-display-inline-images)
  (setq org-adapt-indentation 'headline-data)
  (setq evil-auto-indent 1)
  (setq org-src-preserve-indentation t)
  (setq org-return-follows-link t)
  (setq org-attach-directory "~/Notes/plain_orgfiles/orgfiles/denote/attachments/")

  ;; Open file links in the same window
  (setq org-link-frame-setup
        '((file . find-file))) 

  ;; Close all properties drawers when opening an org file
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (org-cycle-hide-drawers 'all))))
  #+end_src

** Org-mode custom functions
  #+begin_src emacs-lisp
;;;; Create optional links for the companies in job applications
(defun mmotion/org-capture-optional-link ()
  "Create an org link with optional URL input."
  (let ((url (read-string "Company URL (leave empty to skip): ")))
    (if (string= url "")
        (read-string "Company name (no link): ")
      (format "[[%s][%s]]" 
              url
              (read-string "Company name: ")))))

;;;; Set up headings sizes and weights (based on ef-themes' Prot config)
(defvar mmotion-heading-config
  '((org-document-title :family variable-pitch :weight light :height 1.9)
    (org-level-1        :family variable-pitch :weight light :height 1.8)
    (org-level-2        :family variable-pitch :weight regular :height 1.7)
    (org-level-3        :family variable-pitch :weight regular :height 1.6)
    (org-level-4        :family variable-pitch :weight regular :height 1.5)
    (org-level-5        :family variable-pitch :weight bold :height 1.4)
    (org-level-6        :family variable-pitch :weight bold :height 1.3)
    (org-level-7        :family variable-pitch :weight bold :height 1.2)
    (org-level-8        :family variable-pitch :weight bold :height 1.1)))

(defun mmotion/set-heading-fonts ()
  (dolist (heading mmotion-heading-config)
    (let ((face (car heading))
          (attrs (cdr heading)))
      (apply #'set-face-attribute face nil
             ;; Replace 'variable-pitch with actual font family
             (plist-put attrs :family mmotion/variable-font)))))

;;:: Add hook to reapply font settings after theme changes
(defun mmotion/reapply-org-fonts-after-theme-change (&rest _)
  "Reapply org font settings after theme change."
  (when (fboundp 'mmotion/set-heading-fonts)
    (mmotion/set-heading-fonts)))

;;;; Hook into theme loading functions
(advice-add 'load-theme :after #'mmotion/reapply-org-fonts-after-theme-change)
(advice-add 'enable-theme :after #'mmotion/reapply-org-fonts-after-theme-change)

 ;;;; Open links with RET 
  ;; (with-eval-after-load 'org
  ;;   (add-hook 'org-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point))))
  #+end_src
** Org-mode config
   #+begin_src emacs-lisp
(use-package org
  :commands (org-capture org-agenda)
  :hook ((org-mode . mmotion/org-mode-setup)
         (org-mode . mmotion/set-heading-fonts))
  :config
  ;;;; Keep monospace for code blocks etc..
  (custom-theme-set-faces
   'user
   '(org-block             ((t (:inherit fixed-pitch))))
   '(org-code              ((t (:inherit (shadow fixed-pitch)))))
   '(org-table             ((t (:inherit fixed-pitch))))
   '(org-verbatim          ((t (:inherit (shadow fixed-pitch)))))
   '(org-special-keyword   ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-meta-line         ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-indent            ((t (:inherit (org-hide fixed-pitch))))))

  :custom
  (org-ellipsis " ▾")
  (org-hide-emphasis-markers t)
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-pretty-entities t)
  (org-startup-folded 'showeverything)
  (org-hide-block-startup nil)
  (org-log-into-drawer t)
  (org-agenda-files '("~/Notes/plain_orgfiles/orgfiles/todos.org"
                      "~/Notes/plain_orgfiles/orgfiles/notes.org"))
 (org-refile-targets
   '(("~/Notes/plain_orgfiles/orgfiles/todos.org" :maxlevel . 2)))
  (org-refile-use-outline-path t)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)

  ;; Save Org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
   #+end_src
** Org-mode Todo Keywords
   #+begin_src emacs-lisp
  (org-todo-keywords
   '((sequence "TODO(t)" "DOING(d)" "PROJ(p)" "|" "DONE(x!)")
     (sequence "WAIT(w@)" "HOLD(h!)" "IDEA(i)" "|" "COMPLETED(c!)" "CANCELLED(C!)" "KILLED(k!/@)"))))
   #+end_src
** Org-mode Capture Templates
   #+begin_src emacs-lisp
;;;; Set up for job application's spreadsheet capture
;;;;; Path to the Org file containing the job applications spreadsheet
(defvar mmotion/job-spreadsheet-file  "~/Notes/plain_orgfiles/orgfiles/denote/20250711T100844--job-hunting-spreadsheet__career_webdev.org")

(defun mmotion/goto-job-table-insertion-point ()
  "Move point to just before #+TBLFM: in the job spreadsheet to insert a new row."
  (goto-char (point-min))
  (when (search-forward "#+TBLFM:" nil t)
    (beginning-of-line)
    (forward-line -1)
    (end-of-line)
    (newline)))

(defun mmotion/recalculate-job-table-formulas ()
  "Recalculate table formulas in the job spreadsheet after capture."
  (let ((buf (find-buffer-visiting mmotion/job-spreadsheet-file)))
    (when buf
      (with-current-buffer buf
        (goto-char (point-min))
        (when (search-forward "#+TBLFM:" nil t)
          (org-table-calc-current-TBLFM))))))

;;;; Org-capture Templates
(setq org-capture-templates
 `(("t" "Tasks / Ideas")
   ("tt" "Task" entry (file+olp "~/Notes/plain_orgfiles/orgfiles/todos.org" "Inbox")
    "* TODO %?\n  %U\n" :empty-lines 1)
   ("ti" "Idea" entry (file+olp "~/Notes/plain_orgfiles/orgfiles/todos.org" "Inbox")
    "* IDEA %?\n  %U\n" :empty-lines 1)
   ("n" "Note" entry
    (file+olp+datetree "~/Notes/plain_orgfiles/orgfiles/notes.org")
    "\n* %<%H:%M> - Notes :notes:\n\n%?\n\n"
    :empty-lines 1)

("a" "Add Job Application"
 plain
 (file+function mmotion/job-spreadsheet-file
                mmotion/goto-job-table-insertion-point)
 "| | %(format-time-string \"%Y-%m-%d :%H:%M\") | %(mmotion/org-capture-optional-link) | [[%^{Listing's URL}][link to listing]] | %^{Status} | %^{Notes|-} |"
 :empty-lines 0)))

;;;;; Hook to trigger formula recalculation for job appication's spreadsheet
(add-hook 'org-capture-after-finalize-hook #'mmotion/recalculate-job-table-formulas)
   #+end_src
** Evil-org
Activate evil-mode in org-mode (as in org-agenda).
#+begin_src emacs-lisp
;;;; Activate evil-mode in org-mode (as in org-agenda)
(use-package evil-org
  :demand t
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** TOC-org
Table Of Content.
#+begin_src emacs-lisp
;;;; toc-org
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Org-Babel
#+begin_src emacs-lisp
;;;; Org babel
;; active Babel languages
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (js . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  ;; Add JSX support using js-mode
  (push '("jsx" . js) org-src-lang-modes)
  ;; Enable JSX syntax in js-mode
  (setq js-jsx-syntax t))

(setq org-src-fontify-natively t)
#+end_src
** Org-download
#+begin_src emacs-lisp
;; Custom filename function for org-download to use denote's file naming scheme.
(defun mmotion/org-download-file-format-function (filename)
  "Generate Denote-style filename for org-download."
  (let* ((extension (file-name-extension filename))
         (base-name (file-name-sans-extension (file-name-nondirectory filename)))
         (keywords (read-string "Keywords (space-separated): " "image"))
         (timestamp (format-time-string "%Y%m%dT%H%M%S"))
         (clean-title (replace-regexp-in-string "[^a-zA-Z0-9-]" "-" 
                                               (downcase base-name)))
         (clean-keywords (mapconcat (lambda (kw) 
                                     (replace-regexp-in-string "[^a-zA-Z0-9]" "" 
                                                              (downcase kw)))
                                   (split-string keywords) "_")))
    (format "%s==resources--%s__%s.%s" timestamp clean-title clean-keywords extension)))

(use-package org-download
  :init
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir (expand-file-name "~/Notes/plain_orgfiles/orgfiles/denote/attachments/"))
  (setq org-download-heading-lvl nil)  ; This prevents subdirectory creation
  (setq org-download-file-format-function #'mmotion/org-download-file-format-function)
  (when (file-directory-p "~/Notes/plain_orgfiles/orgfiles")
    (unless (file-directory-p org-download-image-dir)
      (make-directory org-download-image-dir nil)))
  :config
  (define-key org-mode-map (kbd "C-c C-p") #'org-download-clipboard)  ; clipboard
  (define-key org-mode-map (kbd "C-c C-i") #'org-download-image)      ; URL
  (define-key org-mode-map (kbd "C-c C-f") #'org-download-yank))      ; local file
#+end_src
** Structure Templates
#+begin_src emacs-lisp
;;;; Structure templates
(with-eval-after-load 'org
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src js :results output")))
#+end_src
** Highlight-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       font-lock-constant-face bold)
          ("PROJ"       font-lock-keyword-face bold)
          ("WAIT"     warning bold)
          ("HOLD"       warning bold)
          ("KILLED"      error bold)
          ("CANCELLED"      error bold)
          ("IDEA" success bold))))
#+end_src
* Org-mode Styling
** Org-superstar (bullet points)
#+begin_src emacs-lisp
;;; Org styling ------------------------------------------------
;;;; Styling bullet points
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-item-bullet-alist
      '((?* . ?•)
        (?+ . ?•)
        (?- . ?•)))

  (org-superstar-headline-bullets-list '("§" "⁖" "" "" "•" "•"))
  ;; This is usually the default, but keep in mind it must be nil
  (org-hide-leading-stars nil)
  ;; This line is necessary	.
  (org-superstar-leading-bullet ?\s)
  ;; If you use Org Indent you also need to add this, otherwise the
  ;; above has no effect while Indent is enabled.
  (setq org-indent-mode-turns-on-hiding-stars nil))
#+end_src
** Fancy Priorities Look
#+begin_src emacs-lisp
;;;; Fancy priorities look
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("󰬈" "󰬉" "󰬊")))
#+end_src
** Org-modern (not in use)
I'm trying this out from time to time but I prefer my "custom" org-mode style. Set not to be tangled.
#+begin_src emacs-lisp :tangle no
(use-package org-modern)
;; Add frame borders and window dividers
(modify-all-frames-parameters
 '((right-divider-width . 40)
   (internal-border-width . 40)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-agenda-tags-column 0
 org-ellipsis "…")
(with-eval-after-load 'org (global-org-modern-mode))
#+end_src
** Olivetti
Typewriter-like look of the page (centring).
#+begin_src emacs-lisp
;;;; Olivetti (better centering and max line length)
(use-package olivetti
  :diminish
  :hook ((text-mode   . olivetti-mode)   ; enable in text buffers
         (markdown-mode . olivetti-mode) ; enable in Markdown
         (eww-mode . olivetti-mode)      ; enable in eww browser
         (org-mode    . olivetti-mode))  ; enable in Org
  :custom
  (olivetti-body-width 100)           ; set body width
  (olivetti-style 'fancy)          ; use fringes for margins
  :config
  ;; Disable olivetti in astro-ts-mode
  (add-hook 'astro-ts-mode-hook (lambda () (olivetti-mode -1))))
#+end_src
** Toggle TODOs and checkboxes with RET
#+begin_src emacs-lisp
(defun mmotion/org-smart-return ()
  "In Org-mode, on RET:
1. Toggle TODO↔DONE on headings.
2. Toggle checkbox state on list items.
3. Follow Org links.
4. Otherwise insert newline + indent."
  (interactive)
  (cond
   ;; 1. Heading TODO/DONE toggle
   ((and (org-at-heading-p)
         (member (org-get-todo-state) '("TODO" "DONE")))
    (org-todo (if (string= (org-get-todo-state) "TODO") "DONE" "TODO")))
   ;; 2. Checkbox toggle
   ((org-at-item-checkbox-p)
    (org-toggle-checkbox))
   ;; 3. Org link follow
   ((org-in-regexp org-link-bracket-re 1)
    (org-open-at-point))
   ;; 4. Default newline + indent
   (t
    (call-interactively 'org-return))))

;; Rebind RET in Org + Evil (plain Emacs setup)
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "RET") #'mmotion/org-smart-return))

(with-eval-after-load 'evil
  (evil-define-key 'insert org-mode-map (kbd "RET") #'mmotion/org-smart-return)
  (evil-define-key 'normal org-mode-map (kbd "RET") #'mmotion/org-smart-return))

(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "RET") #'mmotion/org-smart-return)))
#+end_src
* Denote
** Denote main config
  #+begin_src emacs-lisp
;;; Denote ----------------------------------------------------
(use-package denote
  :ensure t
  ;; :hook (dired-mode . denote-dired-mode)
  :config
  (setq denote-directory (expand-file-name "~/Notes/plain_orgfiles/orgfiles/denote/"))
  (setq denote-known-keywords nil)
  ;; Dired fontifies denote files only in denote's default dir and its subdirs
  (setq denote-dired-directories (list denote-directory))
  (setq denote-dired-directories-include-subdirectories t)

 (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have, for example, a literal
  ;; "[D]" followed by the file's title. Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (denote-rename-buffer-mode 1))
  #+end_src
** Denote-org
   #+begin_src emacs-lisp
;;;; Denote-org
(use-package denote-org
  :ensure t
  :commands
  ;; I list the commands here so that you can discover them more
  ;; easily. You might want to bind the most frequently used ones to
  ;; the `org-mode-map'.
  ( denote-org-link-to-heading
    denote-org-backlinks-for-heading

    denote-org-extract-org-subtree

    denote-org-convert-links-to-file-type
    denote-org-convert-links-to-denote-type

    denote-org-dblock-insert-files
    denote-org-dblock-insert-links
    denote-org-dblock-insert-backlinks
    denote-org-dblock-insert-missing-links
    denote-org-dblock-insert-files-as-headings))
   #+end_src
** Consult-notes
#+begin_src emacs-lisp
;;;; Consult-notes
(use-package consult-notes
  :commands (consult-notes
             consult-notes-search-in-all-notes)
  :config
  (setq consult-notes-file-dir-sources
          '(("Journal" ?j "~/Notes/plain_orgfiles/orgfiles/denote/journal/")))

  ;; (consult-notes-org-headings-mode)
  (when (locate-library "denote")
    (consult-notes-denote-mode))

  ;; Search only for text files in denote dir
(setq consult-notes-denote-files-function (lambda () (denote-directory-files nil t t))))
#+end_src
** Denote-journal
   #+begin_src emacs-lisp
;;;; Denote journal
(use-package denote-journal
  :ensure t
  ;; Bind those to some key for your convenience.
  :commands ( denote-journal-new-entry
              denote-journal-new-or-existing-entry
              denote-journal-link-or-create-entry )
  :hook (calendar-mode . denote-journal-calendar-mode)
  :config
  ;; Use the "journal" subdirectory of the `denote-directory'. Set this
  ;; to nil to use the `denote-directory' instead.
  (setq denote-journal-directory
        (expand-file-name "journal" denote-directory))
  ;; Default keyword for new journal entries. It can also be a list of
  ;; strings.
  (setq denote-journal-keyword "journal")
  ;; Read the doc string of `denote-journal-title-format'.
  (setq denote-journal-title-format 'day-date-month-year))

(with-eval-after-load 'calendar
  (evil-define-key 'normal calendar-mode-map
    (kbd "RET") #'denote-journal-calendar-new-or-existing
    (kbd "SPC") #'denote-journal-calendar-new-or-existing))

(with-eval-after-load 'org-capture
  (add-to-list 'org-capture-templates
               '("j" "Journal" entry
                 (file denote-journal-path-to-new-or-existing-entry)
                 "* %(format-time-string \"%H:%M\") %?\n%i"
                 :kill-buffer t
                 :empty-lines 1)))

(defun mmotion/open-today-journal ()
  "Open or create today's journal entry directly (not via capture)."
  (interactive)
  (let ((today-file (denote-journal-path-to-new-or-existing-entry)))
    (find-file today-file)))
   #+end_src
** Denote-explore
#+begin_src emacs-lisp
;;;; Denote-explore
(use-package denote-explore)
#+end_src
* Dired
** Main dired config
   #+begin_src emacs-lisp
;;; Dired ------------------------------------------------------
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom
  (dired-dwim-target t)
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-listing-switches "-agho --group-directories-first"))
  :config
  (defun my-dired-sort-by-size ()
  (interactive)
  (dired-sort-other "-alS"))

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file
    "s" 'my-dired-sort-by-size)

;;;;; Fix leader key in dired buffers
(with-eval-after-load 'dired
  (evil-define-key 'normal dired-mode-map (kbd "SPC") nil))

(with-eval-after-load 'dired
  (require 'dired-x))
   #+end_src
** Nerd-icons for Dired
   #+begin_src emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
   #+end_src
** Hide dotfiles
   #+begin_src emacs-lisp
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  ;; Bind "g ." in Evil normal state within Dired
  (evil-define-key 'normal dired-mode-map
    "g." #'dired-hide-dotfiles-mode))
   #+end_src
** Set up programs to open certain files from dired
   #+begin_src emacs-lisp
(use-package dired-open
  :after dired
  ;; :commands (dired dired-jump)
  :config
  (setq dired-open-extensions
        '(("png"  . "viewnior")
          ("jpeg" . "viewnior")
          ("jpg"  . "viewnior")
	        ;; ("pdf" . "zathura")
	        ;; ("epub" . "zathura")
          ("mp3" . "mpv --force-window --keep-open")
	        ("mp4" . "mpv")
          ("mkv"  . "mpv"))))
   #+end_src
** Dired preview (not in use)
Disabled for now, I don't like it.
   #+begin_src emacs-lisp :tangle no
;; Enable Dired Preview and make it Evil-friendly
(use-package dired-preview
  :ensure t
  ;; :hook (dired-mode . dired-preview-mode)
  :config
  (setq dired-preview-delay 0.1)
  ;; Add Evil navigation commands to trigger preview
  (dolist (cmd '(evil-next-line evil-previous-line))
    (add-to-list 'dired-preview-trigger-commands cmd)))
   #+end_src
   
* Programming
** Project
#+begin_src emacs-lisp
;;;; Built-in project.el configuration
(use-package project
  :ensure nil
  :config
  ;; ;; Auto-discover projects in your search paths
  ;; (when (file-directory-p "~/Projects")
  ;;   (project-remember-projects-under "~/Projects" t))
  
  ;; Set default action when switching projects (like your projectile-dired setup)
  (setq project-vc-ignores '("node_modules/"))
  (setq project-switch-commands
        '((project-dired "Open Dired" ?d)
          (project-find-file "Find file" ?f)
          (project-find-regexp "Find regexp" ?g)
          (project-shell "Shell" ?s)))
  
  :bind
  ;; Main project commands with C-c p prefix (matching your setup)
  (("C-c p p" . project-switch-project)
   ("C-c p f" . project-find-file)
   ("C-c p d" . project-dired)
   ("C-c p g" . project-find-regexp)
   ("C-c p s" . project-shell)
   ("C-c p k" . project-kill-buffers)))
#+end_src
** Magit
#+begin_src emacs-lisp
;;; Magit ----------------------------------------------------
(use-package magit
  :commands magit-status)
#+end_src
** Tree-sitter
  #+begin_src emacs-lisp
;;; Tree-sitter ------------------------------------------------
(use-package treesit
  :ensure nil
  :custom
  (treesit-extra-load-path '("/usr/lib/tree-sitter"))
  (treesit-font-lock-level 3)
  (major-mode-remap-alist
   '((python-mode . python-ts-mode)
     (javascript-mode . js-ts-mode)
     (js-mode . js-ts-mode)
     (astro-mode . astro-ts-mode)
     (html-mode . html-ts-mode)
     (css-mode . css-ts-mode)
     (sh-mode . bash-ts-mode))))
  #+end_src
** Web development
*** Astro support
  #+begin_src emacs-lisp
;;;;; Astro support
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package astro-ts-mode
  :ensure t
  :mode "\\.astro\\'")
  #+end_src
*** Emmet support
#+begin_src emacs-lisp
;;;; Emmet mode
(use-package emmet-mode
  :ensure t
  :hook ((html-ts-mode . emmet-mode)
         (css-ts-mode . emmet-mode)
         (astro-ts-mode . emmet-mode)
         (js-ts-mode . emmet-mode))
  :bind (("C-j" . emmet-expand-line))
  :config
  ;; Enable JSX support for your JS/TS modes
  (add-to-list 'emmet-jsx-major-modes 'js-ts-mode)
  (add-to-list 'emmet-jsx-major-modes 'astro-ts-mode)
  
;; Add emmet to completion-at-point functions
  (defun my/setup-emmet-completion ()
    (add-to-list 'completion-at-point-functions 'emmet-completion-at-point-function))
  
  (add-hook 'astro-ts-mode-hook #'my/setup-emmet-completion)
  (add-hook 'html-ts-mode-hook #'my/setup-emmet-completion))
#+end_src
** LSP mode
*** LSP mode set up
   #+begin_src emacs-lisp
;;; LSP mode ---------------------------------------------------
;;;; Breadcrumb
(defun mmotion/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :bind-keymap
  ("C-c l" . lsp-command-map)
  :hook ((lsp-mode . mmotion/lsp-mode-setup)
         ((css-mode
           html-mode
           js-mode
           js2-mode
           typescript-mode
           tsx-mode
           python-mode
           ;; Add tree-sitter modes to LSP
           html-ts-mode
           css-ts-mode
           js-ts-mode
           astro-ts-mode) . lsp-deferred))
  :config
  (setq lsp-completion-provider :capf)
  (setq lsp-completion-enable t)        ; Ensure completion is enabled
  (setq lsp-completion-show-detail t)   ; Show completion details
  (setq lsp-completion-show-kind t)     ; Show completion kind
  ;; Disable company-specific features
  (setq lsp-enable-completion-at-point t)
  (lsp-enable-which-key-integration t)
  (setq lsp-enable-symbol-highlighting t)
  (setq lsp-clients-typescript-server-args '("--stdio"))
  ;; Ensure TypeScript server handles JSX in JS files
  (setq lsp-typescript-preferences-include-package-json-auto-imports "on")
  ;; Add language ID mappings for emmet-ls support
  (add-to-list 'lsp-language-id-configuration '(astro-ts-mode . "astro"))
  (add-to-list 'lsp-language-id-configuration '(html-ts-mode . "html"))
  (add-to-list 'lsp-language-id-configuration '(css-ts-mode . "css")))

;;;; lsp-ui
(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-position 'bottom)
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-peek-find-references t)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil))

;;;; Consult-lsp
(use-package consult-lsp
  :ensure t
  :after (consult lsp-mode))
;;;; Python
(use-package lsp-jedi
  :ensure t)

(setq major-mode-remap-alist
      '((python-mode . python-ts-mode)))

(use-package pyvenv
  :after python-ts-mode
  :defer t)

(use-package pyvenv-auto
  :defer t
  :hook ((python-mode python-ts-mode) . pyvenv-auto-run))
   #+end_src
*** Teemacs
   #+begin_src emacs-lisp
;;;; Treemacs
(use-package lsp-treemacs
  :after lsp)
   #+end_src
*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :hook (prog-mode . flycheck-mode)
      ;; :init (global-flycheck-mode)
      :bind (:map flycheck-mode-map
                  ("M-n" . flycheck-next-error) ; optional but recommended error navigation
                  ("M-p" . flycheck-previous-error)))
#+end_src
** Formatting
#+begin_src emacs-lisp
;;; APHELEIA
;; auto-format different source code files extremely intelligently
;; https://github.com/radian-software/apheleia
(use-package apheleia
  :ensure apheleia
  :diminish ""
  :defines
  apheleia-formatters
  apheleia-mode-alist
  :functions
  apheleia-global-mode
  :config
  (setf (alist-get 'prettier-json apheleia-formatters)
        '("prettier" "--stdin-filepath" filepath))
  (apheleia-global-mode +1))
#+end_src
* Terminal Emulators
** Term
#+begin_src emacs-lisp
  ;;; Terminal emulators ----------------------------------------
  (use-package term
    :ensure nil
    :commands term
    :config
    (setq explicit-shell-file-name "/usr/bin/sh")) ;; Change this to zsh, etc
#+end_src
** Vterm
#+begin_src emacs-lisp
;;;; vterm
(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
#+end_src
** Vterm-toggle
#+begin_src emacs-lisp
  ;;;; Vterm-toggle
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
* Reset GC Threshold
#+begin_src emacs-lisp
;;; Reset gc threshold -----------------------------------------
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 2 1000 1000))))
#+end_src
